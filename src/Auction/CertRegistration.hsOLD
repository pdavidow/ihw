{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE DerivingVia #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
 
module Auction.Registration
    ( Registration -- hide constructor
    , validateRegisteree
    , pkhForRegistration
    ) 
    where

import           Data.Aeson (FromJSON, ToJSON)
import           GHC.Generics (Generic)
import qualified Data.Text as T

import           Ledger ( PubKeyHash(PubKeyHash) ) 

import qualified PlutusTx

import           PlutusTx.Prelude ( otherwise, Either(..), Eq, Ord, ($) )
import qualified Prelude as P   
import           Schema (ToSchema)

import           Auction.Bidders ( Bidders )


newtype Registration = Registration PubKeyHash 
    deriving stock (P.Eq, P.Ord, P.Show, Generic)
    deriving anyclass (ToJSON, FromJSON, ToSchema)
    deriving newtype (Eq, Ord, PlutusTx.ToData, PlutusTx.FromData, PlutusTx.UnsafeFromData)

PlutusTx.makeLift ''Registration


validateRegisteree :: Bidders -> PubKeyHash -> Either T.Text Registration
validateRegisteree b x
  | isBidderRegistered b x = Left "already registered"
  | isBidderApproved b x = Left "already approved"
  | otherwise = Right $ Registration x


{-# INLINABLE pkhForRegistration #-}
pkhForRegistration :: Registration -> PubKeyHash
pkhForRegistration (Registration x) = x