{-# LANGUAGE NoImplicitPrelude #-}

module Auction.BidderStatusUtil
    ( isBidderApproved
    , isBidderRegistered
    ) 
    where

import           Ledger ( PubKeyHash ) 

import qualified PlutusTx.AssocMap as AssocMap
import           PlutusTx.Prelude ( Bool, Eq((==)), Maybe(..) ) 

import           Auction.Status ( Status(Approved, Registered) )
import           Auction.Bidders ( Bidders, mapFrom )


{-# INLINABLE isBidderRegistered #-}
isBidderRegistered :: Bidders -> PubKeyHash -> Bool 
isBidderRegistered b pkh = Just Registered == AssocMap.lookup pkh (mapFrom b)


{-# INLINABLE isBidderApproved #-}
isBidderApproved :: Bidders -> PubKeyHash -> Bool 
isBidderApproved b pkh = Just Approved == AssocMap.lookup pkh (mapFrom b)
